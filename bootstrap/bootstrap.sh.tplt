if [ -d "/code/${project_dir}" ]; then
  cp /code/${project_dir} /project/${project_dir}
fi

cd /project
if [ ! -d "${project_dir}" ]; then
  git clone ${terraform_project_url}
fi
cd ${project_dir}
git checkout ${branch}
cd control-network
if [ ! -f "terraform.tfvars" ]; then
  cat>terraform.tfvars<<-EOF
  region = "${region}"
  region_id = "${region_id}"
  az = [${az}]
  project_id = "${project_id}"
  cidr = "${controller_cidr}"
  vpcName = "controllerVpc"
  subnetName = "controllerSubnet"
  consul_image_id = "${consul_server_image_id}"
  controller_image_id = ""
  controler_instance_type = ""
  allow_ip = "${allow_ip}"
  root_password = ""
  tag = "${cluster_id}"
  project_root_dir = ""
  consul_backend_root_password = "${consul_backend_root_password}"
  consul_backend_data_volume_size = ${consul_backend_data_volume_size}
  consul_backend_instance_type = "${consul_backend_instance_type}"
  ipv6_api_url = "${ipv6_api_url}"
  controller_count = 0
  provision_from_kun = true
  charge_type = "${charge_type}"
  duration = ${duration}
  legacy_vpc_id = "${legacy_vpc_id}"
  legacy_subnet_id = "${legacy_subnet_id}"
EOF
fi
if [ ! -f "inited" ]; then
  terraform init -plugin-dir=/plugin
  terraform apply --auto-approve -input=false
  touch inited
fi
#give consul some time to be stablized
sleep 10
if [ ! -d "/backend" ]; then
  mkdir /backend
  export TF_VAR_remote_state_backend_url=http://[$(terraform output -json | jq -r '.backend_ip.value')]:8500
  echo address=\"$TF_VAR_remote_state_backend_url\" > /backend/backend.tfvars
  echo remote_state_backend_url=\"$TF_VAR_remote_state_backend_url\" > /backend/remote.tfvars
fi

if [ ! -f "../network/terraform.tfvars.json" ]; then
  cat>../network/terraform.tfvars.json<<-EOF
  {
    "region": "${region}",
    "project_id": "${project_id}",

    "mgrVpcCidr": "${mgrVpcCidr}",
    "clientVpcCidr": "${clientVpcCidr}",
    "legacy_vpc_id": "${legacy_vpc_id}",
    "legacy_subnet_id": "${legacy_subnet_id}"
  }
EOF
fi
if [ ! -f "../terraform.tfvars.json" ]; then
  cat>../terraform.tfvars.json<<-EOF
  {
      "allow_ip": "${allow_ip}",
      "az": [${az}],
      "consul_server_image_id": "${consul_server_image_id}",
      "consul_server_root_password": "${consul_server_root_password}",
      "consul_server_type": "${consul_server_type}",
      "nomad_client_broker_type": "${nomad_client_broker_type}",
      "nomad_client_image_id": "${nomad_client_image_id}",
      "nomad_client_namesvr_type": "${nomad_client_namesvr_type}",
      "nomad_client_root_password": "${nomad_client_root_password}",
      "nomad_server_image_id": "${nomad_server_image_id}",
      "nomad_server_root_password": "${nomad_server_root_password}",
      "nomad_server_type": "${nomad_server_type}",
      "project_id": "${project_id}",
      "region": "${region}",
      "ipv6_server_url": "${ipv6_api_url}",
      "region_id": "${region_id}",
      "broker_count": ${broker_count},
      "name_server_count": ${name_server_count},
      "nomad_server_count": ${nomad_server_count},
      "name_server_local_disk_type": "${name_server_local_disk_type}",
      "name_server_udisk_type": "${name_server_udisk_type}",
      "name_server_data_disk_size": ${name_server_data_disk_size},
      "broker_local_disk_type": "${broker_local_disk_type}",
      "broker_udisk_type": "${broker_udisk_type}",
      "broker_data_disk_size": ${broker_data_disk_size},
      "name_server_use_udisk": ${name_server_use_udisk},
      "broker_use_udisk": ${broker_use_udisk},
      "nomad_server_use_udisk": ${nomad_server_use_udisk},
      "nomad_server_local_disk_type": "${nomad_server_local_disk_type}",
      "nomad_server_udisk_type": "${nomad_server_udisk_type}",
      "nomad_server_data_disk_size": ${nomad_server_data_disk_size},
      "consul_server_data_disk_size": ${consul_server_data_disk_size},
      "consul_server_local_disk_type": "${consul_server_local_disk_type}",
      "consul_server_udisk_type": "${consul_server_udisk_type}",
      "consul_server_use_udisk": ${consul_server_use_udisk},
      "namesvr_http_endpoint_port": ${namesvr_http_endpoint_port},
      "charge_type": "${charge_type}",
      "duration": ${duration},
      "env_name": "${env_name}"
  }
EOF
fi
if [ ! -f "../system-job/terraform.tfvars" ]; then
  cat>../system-job/terraform.tfvars<<-EOF
  fabio_image = "${fabio_image_id}"
  prometheus_image = "${prometheus_image}"
  namesvr_fabio_port = ${namesvr_http_endpoint_port}
  prometheus_port = ${prometheus_port}
  nomad_cluster_id = "${cluster_id}"
EOF
fi
cd ../network
rm -f destroyed
if [ ! -f "inited" ]; then
  terraform init -plugin-dir=/plugin -backend-config=/backend/backend.tfvars -backend-config=/backend/remote.tfvars
  terraform workspace new ${cluster_id}
  terraform workspace select ${cluster_id}
  terraform apply --auto-approve -input=false
  touch inited
fi
cd ..
rm -f destroyed
if [ ! -f "inited" ]; then
  terraform init -plugin-dir=/plugin -backend-config=/backend/backend.tfvars -backend-config=/backend/remote.tfvars
  terraform workspace new ${cluster_id}
  terraform apply --auto-approve -input=false -var-file=terraform.tfvars.json
  touch inited
fi

cd system-job
rm -f destroyed
if [ ! -f "inited" ]; then
  terraform init -plugin-dir=/plugin -backend-config=/backend/backend.tfvars -backend-config=/backend/remote.tfvars
  terraform workspace new ${cluster_id}
  terraform apply --auto-approve -input=false -var-file=terraform.tfvars
  touch inited
fi

echo "Finished"
tail -f /dev/null
